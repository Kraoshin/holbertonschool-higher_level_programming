===========================
How to Use 7-base_geometry.py
===========================

This module defines a base geometry class BaseGeometry.

Usage
=====
Methods:
        area(self): Raises an Exception indicating that the method
        is not implemented.
        integer_validator(self, name, value): Validates that value
        is a positive integer.

    Example tests:
    
    >>> bg = BaseGeometry()
    >>> bg.area()
    Traceback (most recent call last):
        ...
    Exception: area() is not implemented

    >>> bg.integer_validator("size", 10)
    >>> bg.integer_validator("size", "string")
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> bg.integer_validator("size", 0)
    Traceback (most recent call last):
        ...
    ValueError: size must be greater than 0

    >>> bg.integer_validator("size", -5)
    Traceback (most recent call last):
        ...
    ValueError: size must be greater than 0

       >>> bg.integer_validator("tuple", (1, 2))
    Traceback (most recent call last):
        ...
    TypeError: tuple must be an integer

    >>> bg.integer_validator("set", {1, 2, 3})
    Traceback (most recent call last):
        ...
    TypeError: set must be an integer

    >>> bg.integer_validator("bool", True)
    Traceback (most recent call last):
        ...
    TypeError: bool must be an integer

    >>> bg.integer_validator("none", None)
    Traceback (most recent call last):
        ...
    TypeError: none must be an integer

    >>> bg.integer_validator("infinity", float('inf'))
    Traceback (most recent call last):
        ...
    TypeError: infinity must be an integer

    >>> bg.integer_validator("nan", float('nan'))
    Traceback (most recent call last):
        ...
    TypeError: nan must be an integer

    >>> bg.integer_validator("max int", 2**31 - 1)

    >>> bg.integer_validator("min int", -2**31)
    Traceback (most recent call last):
        ...
    ValueError: min int must be greater than 0
